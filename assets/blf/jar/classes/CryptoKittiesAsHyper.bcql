SET BLOCKCHAIN "Hyperledger";

SET OUTPUT FOLDER "./test_output";

SET CONNECTION {
   "hyperledger/connection-org1.yaml",
   "hyperledger/server.key",
   "hyperledger/server.crt",
   "Org1MSP",
   "mychannel"
};

int[] kitties = newIntArray();
BLOCKS (32) (91) {
    LOG ENTRIES ("kitties") (Birth(string owner, uint256 newKittenID, uint256 matronID, uint256 sireID, uint256 genes)) {
        add(kitties, newKittenID);
        EMIT XES EVENT ()(newKittenID)()("birth" as xs:string concept:name);

        bool containsMatron = contains(kitties, matronID);
        IF (containsMatron) {
            EMIT XES EVENT ()(matronID)()("became mother" as xs:string concept:name);
        }

        bool containsSire = contains(kitties, sireID);
        IF (containsSire) {
            EMIT XES EVENT ()(sireID)()("became father" as xs:string concept:name);
        }
    }

    LOG ENTRIES ("kitties") (Transfer(string from, string to, uint256 kittyID)) {
        bool containsKitty = contains(kitties, kittyID);
        IF (containsKitty) {
            EMIT XES EVENT ()(kittyID)()("transferred" as xs:string concept:name);
        }
    }

    LOG ENTRIES ("kitties") (Pregnant(string owner, uint256 matronID, uint256 sireID, string matronCooldown)) {
        bool containsMatron = contains(kitties, matronID);
        IF (containsMatron) {
            EMIT XES EVENT ()(matronID)()("conceived as mother" as xs:string concept:name);
        }

        bool containsSire = contains(kitties, sireID);
        IF (containsSire) {
            EMIT XES EVENT ()(sireID)()("conceived as father" as xs:string concept:name);
        }
    }
}
